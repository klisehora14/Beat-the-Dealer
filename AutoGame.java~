package beatTheDealer;
import java.util.ArrayList;
// driver that runs AutomatedPlayer against the Dealer x times...
//SECOND VERSION

public class AutoGame
{
  static ArrayList<String> dealer = new ArrayList<String>(); //keep track of the cards CURRENLTY in the dealer's hand. first card is not available to player
  static ArrayList<String> autoPlayer = new ArrayList<String>();
  
  static int gameNumber; //what game of however many they're on 
  static boolean dealerAce = false;
  static boolean playerAce = false;
  static int dealersPoints = 0;
  static int playersPoints = 0;
  static int counter = 0;
  static int i = 0;
  static String playerMove = "";
  static int playerCounter = 0; //starts off with two cards in the player's hand
  static int dealersGame = 0; //how many games the dealer won
  static int playersGame = 0; //how many games the automated player won
  static boolean dealerWon = false;
  static boolean playerWon = false;
  
  public static String autoGame(int numberOfGames)
  {
    dealersGame = 0;
    playersGame = 0;
    gameNumber = 1; //first game
    
    while (gameNumber <= numberOfGames) //still going through as many as the better wanted
    { 
      playerWon = false;
      dealerWon = false; //start each loop as false because each loop is a new game
      
      for (int i = 1; i <= numberOfGames; i++) //what to do for each game
      {
        System.out.println("game number= " +gameNumber + " dealersgame = " + dealersGame + ". playersgame = " + playersGame);
        //play dealer and player their cards
        dealCards();
        
        // call automated player to see what it says to do.. give it dealer and autoPlayer arraylists
        playerMove = AutomatedPlayer.automatedPlayer(dealer, autoPlayer); //will return either "hit" or "stand" based on that stuff
        
        //tell what cards the dealer/player has
        listCards();
        
        //hit or stand?
        while (playerMove.equals("hit")) //keep going through autoplayer until it says to stand
        {
          hit();
          playerMove = AutomatedPlayer.automatedPlayer(dealer, autoPlayer);
        }
        
        if (playerMove.equals("stand")) //can finish the loop and end that game
        {
          stand();
        }
        
        checkStand(dealersPoints, playersPoints); //checks to see who has more points; adds appropriate numbers to dealersgame and playersgame
        
        gameNumber += 1; //next game
      }
    }
    
    //completed all rounds
    //check to see if dealer or autoplayer won
    
     if (numberOfGames == 1)
      {
        System.out.println("The game has been completed.");
      }
      else //for plurality
      {
        System.out.println("All " + numberOfGames + " games have been completed.");
      }
      System.out.print("Game score: Dealer:Automated player = " + dealersGame + ":" + playersGame + ".");
      
      if (dealersGame > playersGame)
      {
        System.out.println("The dealer won.");
        return "dealer";
      }
      
      else if (playersGame > dealersGame)
      {
        System.out.println("The player won.");
        return "autoPlayer";
      }
      
      else //tie
      {
        System.out.println("There is a tie. You keep your bet.");
        return "tie";
      }
    
  }
  
  private static void listCards()
  {
    //tell who had what cards: just a check
    for (int k = 0; k < autoPlayer.size(); k++)
    {
      System.out.println(autoPlayer.get(k) + ", ");
    }
    
    for (int k = 0; k < dealer.size(); k++)
    {
      System.out.println(dealer.get(k) + ", ");
    }
  }
  
  
  
  private static void hit()
  {
    //if hit, play player another card and add points to playersPoints
    System.out.println("said hit");
    autoPlayer.add(Deck.deck()); //add another card
    playerCounter += 1; //number of cards added
    int temp = CardValue.cardValue(dealer.get(playerCounter));
    playersPoints += temp; //add value of that card to their total points
    System.out.println("finished hit");
  }
  
  private static void stand()
  {
    //if stand, stay still and check to see if soft hand and if so then if having the ace worth 11 is worth anything better
    System.out.println("said stand");
    for (int x = 0; x < autoPlayer.size(); x ++) // go through each card
    {
      if (CardValue.cardValue(autoPlayer.get(x)) == 1) //has ace
      {
        playerAce = true;
        System.out.println("has ace");
      }
      else
      {
        System.out.println("doesn't have ace");
      }
    }
    
    System.out.println("Outside of has ace loop");
    
    if ((playerAce == true) && ((playersPoints + 10) <= 21)) //if has ace and that ace being 11 is less than or equal to 21
    {
      playersPoints = playersPoints + 10; //now that ace is worth 11
      System.out.println("counted ace");
    }
    
    System.out.println("Automated player stands. Total points: " + playersPoints + ". Dealer's total is: " + dealersPoints + ". ");
  }
  

 private static void checkStand(int dealersPoints, int playersPoints) 
  {
    //if dealer > player && dealer <= 21
    if ((dealersPoints > playersPoints) && (dealersPoints <= LIMIT))
    {
      dealerWon = true;
    }
    
    //if dealer < player && player <= 21
    if ((dealersPoints < playersPoints) && (playersPoints <= LIMIT))
    {
      playerWon = true;
    }
    
    //if dealer > 21 && player > 21
    if ((dealersPoints > 21) & (playersPoints > 21))
    {
      dealerWon = false;
      playerWon = false;
    }
    
    //if player > 21 && dealer < 21
    if ((playersPoints > 21) && (dealersPoints < 21))
    {
      dealerWon = true;
    }
    
    //if dealer > 21 && player < 21
    if ((dealersPoints > 21) && (playersPoints < 21))
    {
      playerWon = true;
    }
    
    //if player && dealer > 21
    if ((playersPoints > 21) && (dealersPoints > 21))
    {
      playerWon = false;
      dealerWon = false;
    }
    
    //if player == dealer && < 21
    if ((playersPoints == dealersPoints) && (playersPoints < 21))
    {
      playerWon = true;
      dealerWon = true;
    }
    
    //if player == dealer == 21
    if ((playersPoints == dealersPoints) && (playersPoints == 21))
    {
      playerWon = true;
      dealerWon = true;
    }
    
    whoWon(playerWon, dealerWon);
  }
 
 private static void whoWon (boolean playerWon, boolean dealerWon)
 {
   if ((playerWon == true) && (dealerWon == true))
   {
     System.out.println("AutoPlayer and Dealer tied. Round not counted.");
     gameNumber = gameNumber - 1; //because it automatically adds one at the end of the loop
   }
   else if ((playerWon == true) && (dealerWon == false))
   {
     playersGame =+ 1;
     System.out.println("AutoPlayer won that round.");
   }
   else if ((playerWon == false) && (dealerWon == true))
   {
     dealersGame =+ 1;
     System.out.println("The Dealer won that round.");
   }
   else //both false
   {
     System.out.println("AutoPlayer and Dealer busted. Round not counted.");
     gameNumber = gameNumber - 1; //because it automatically adds one at the end of the loop
   }
   
   
 }
  
}